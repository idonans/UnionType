/////////////////////////////////
// maven 发布配置
// @version 1.0
/////////////////////////////////
apply plugin: 'maven-publish'
apply plugin: 'signing'

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = rootProject.ext.bcfg.ver.versionName

                switch (POM_PACKAGING) {
                    case "aar":
                        from components.release
                        break
                    case "jar":
                        from components.java
                        break
                }

                if (POM_INCLUDE_SRC.toBoolean()) {
                    artifact sourcesJar
                }
                artifact javadocsJar

                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "maven central"
                if (rootProject.ext.bcfg.ver.versionName.endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
            }
        }
    }

    signing {
        sign publishing.publications.maven
    }
}

task javadocs(type: Javadoc) {
    switch (POM_PACKAGING) {
        case "aar":
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            break
        case "jar":
            source = sourceSets.main.allSource
            break
    }

    title = 'Android applicatoin core library'
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('charset', 'utf-8')
    options.addStringOption('encoding', 'utf-8')
    options.addStringOption('docencoding', 'utf-8')

    exclude 'com/masonsoft/imsdk/core/**/*'

    failOnError = false
}

afterEvaluate {
    switch (POM_PACKAGING) {
        case "aar":
            javadocs.classpath += files(android.libraryVariants.collect { variant ->
                variant.javaCompileProvider.get().classpath.files
            })
            javadocs.classpath += files(android.libraryVariants.collect { variant ->
                "build/intermediates/aar_main_jar/${variant.buildType.name}/classes.jar"
            })
            break
        case "jar":
            break
    }
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')

    switch (POM_PACKAGING) {
        case "aar":
            from android.sourceSets.main.java.srcDirs
            break
        case "jar":
            from sourceSets.main.allSource.srcDirs
            break
    }
}
